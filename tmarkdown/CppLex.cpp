/*
 * Generated by TKLGEN - VersionNov 27 2015
 * Copyright (C) 2013, Thiago Adams (thiago.adams@gmail.com)
 * www.thradams.com
 *
 */
#include "stdafx.h"
#include "CppLex.h"
const char* Cpp_Tokens_ToString(Cpp_Tokens e)
{
    switch(e)
    {
    case TKEXCLAMATION_MARK: return "EXCLAMATION_MARK";
    case TKQUOTATION_MARK: return "QUOTATION_MARK";
    case TKDOLLAR_SIGN: return "DOLLAR_SIGN";
    case TKPERCENT_SIGN: return "PERCENT_SIGN";
    case TKAMPERSAND: return "AMPERSAND";
    case TKAPOSTROPHE: return "APOSTROPHE";
    case TKLEFT_PARENTHESIS: return "LEFT_PARENTHESIS";
    case TKRIGHT_PARENTHESIS: return "RIGHT_PARENTHESIS";
    case TKASTERISK: return "ASTERISK";
    case TKPLUS_SIGN: return "PLUS_SIGN";
    case TKCOMMA: return "COMMA";
    case TKHYPHEN_MINUS: return "HYPHEN_MINUS";
    case TKFULL_STOP: return "FULL_STOP";
    case TKSOLIDUS: return "SOLIDUS";
    case TKCOLON: return "COLON";
    case TKSEMICOLON: return "SEMICOLON";
    case TKLESS_THAN_SIGN: return "LESS_THAN_SIGN";
    case TKEQUALS_SIGN: return "EQUALS_SIGN";
    case TKGREATER_THAN_SIGN: return "GREATER_THAN_SIGN";
    case TKQUESTION_MARK: return "QUESTION_MARK";
    case TKCOMMERCIAL_AT: return "COMMERCIAL_AT";
    case TKLEFT_SQUARE_BRACKET: return "LEFT_SQUARE_BRACKET";
    case TKREVERSE_SOLIDUS: return "REVERSE_SOLIDUS";
    case TKRIGHT_SQUARE_BRACKET: return "RIGHT_SQUARE_BRACKET";
    case TKCIRCUMFLEX_ACCENT: return "CIRCUMFLEX_ACCENT";
    case TKLOW_LINE: return "LOW_LINE";
    case TKGRAVE_ACCENT: return "GRAVE_ACCENT";
    case TKLEFT_CURLY_BRACKET: return "LEFT_CURLY_BRACKET";
    case TKVERTICAL_LINE: return "VERTICAL_LINE";
    case TKRIGHT_CURLY_BRACKET: return "RIGHT_CURLY_BRACKET";
    case TKTILL: return "TILL";
    case TKNUMBER_SIGN: return "NUMBER_SIGN";
    case TKTKNOWIKI_BLOCK_CLOSE: return "TKNOWIKI_BLOCK_CLOSE";
    case TKLINECOMMENT: return "LINECOMMENT";
    case TKCOMMENT: return "COMMENT";
    case TKCHAR: return "CHAR";
    case TKSTRING: return "STRING";
    case TKBlanks: return "Blanks";
    case TKBreakLine: return "BreakLine";
    case TKNotBreakLine: return "NotBreakLine";
    case TKEndMark: return "EndMark";
    case TKNumber: return "Number";
    case TKIdentifier: return "Identifier";
    default:break;
    }
    return "";
}

int Cpp_GetNext(int state, wchar_t ch)
{
    switch (state)
    {
        case 0:
        if (ch == L'\0')
            return 1;
        else if (ch == L'\t')
            return 2;
        else if (ch == L'\n')
            return 3;
        else if (ch == L'\r')
            return 4;
        else if (ch == L' ')
            return 2;
        else if (ch == L'!')
            return 5;
        else if (ch == L'"')
            return 6;
        else if (ch == L'#')
            return 7;
        else if (ch == L'$')
            return 8;
        else if (ch == L'%')
            return 9;
        else if (ch == L'&')
            return 10;
        else if (ch == L'\'')
            return 11;
        else if (ch == L'(')
            return 12;
        else if (ch == L')')
            return 13;
        else if (ch == L'*')
            return 14;
        else if (ch == L'+')
            return 15;
        else if (ch == L',')
            return 16;
        else if (ch == L'-')
            return 17;
        else if (ch == L'.')
            return 18;
        else if (ch == L'/')
            return 19;
        else if (ch >= L'0' && ch <= L'9')
            return 20;
        else if (ch == L':')
            return 21;
        else if (ch == L';')
            return 22;
        else if (ch == L'<')
            return 23;
        else if (ch == L'=')
            return 24;
        else if (ch == L'>')
            return 25;
        else if (ch == L'?')
            return 26;
        else if (ch == L'@')
            return 27;
        else if (ch >= L'A' && ch <= L'Z')
            return 28;
        else if (ch == L'[')
            return 29;
        else if (ch == L'\\')
            return 30;
        else if (ch == L']')
            return 31;
        else if (ch == L'^')
            return 32;
        else if (ch == L'_')
            return 33;
        else if (ch == L'`')
            return 34;
        else if (ch >= L'a' && ch <= L'z')
            return 28;
        else if (ch == L'{')
            return 35;
        else if (ch == L'|')
            return 36;
        else if (ch == L'}')
            return 37;
        if (ch == L'~')
    return 38;
        break;
        case 1:
        /* end state for TKEndMark*/
        break;
        case 2:
        if (ch == L'\t')
            return 2;
        else if (ch == L' ')
            return 2;
        /* end state for TKBlanks*/
        break;
        case 3:
        /* end state for TKBreakLine*/
        break;
        case 4:
        if (ch == L'\n')
    return 3;
        break;
        case 5:
        /* end state for TKEXCLAMATION_MARK*/
        break;
        case 6:
        if (ch >= L' ' && ch <= L'!')
            return 40;
        else if (ch == L'"')
            return 41;
        else if (ch >= L'#' && ch <= L'[')
            return 40;
        else if (ch == L'\\')
            return 42;
        else if (ch >= L']'/* && ch <= L'\u00ff' */)
            return 40;
        /* end state for TKQUOTATION_MARK*/
        break;
        case 7:
        if (ch >= L'#' && ch <= L'$')
            return 28;
        else if (ch >= L'0' && ch <= L'9')
            return 43;
        else if (ch >= L'A' && ch <= L'Z')
            return 28;
        else if (ch == L'_')
            return 28;
        else if (ch >= L'a' && ch <= L'z')
            return 28;
    /*TKNUMBER_SIGN*/
        /* end state for TKNUMBER_SIGN*/
        break;
        case 8:
        if (ch >= L'#' && ch <= L'$')
            return 28;
        else if (ch >= L'0' && ch <= L'9')
            return 43;
        else if (ch >= L'A' && ch <= L'Z')
            return 28;
        else if (ch == L'_')
            return 28;
        else if (ch >= L'a' && ch <= L'z')
            return 28;
    /*TKDOLLAR_SIGN*/
        /* end state for TKDOLLAR_SIGN*/
        break;
        case 9:
        /* end state for TKPERCENT_SIGN*/
        break;
        case 10:
        /* end state for TKAMPERSAND*/
        break;
        case 11:
        if (ch >= L' ' && ch <= L'&')
            return 44;
        else if (ch == L'\'')
            return 45;
        else if (ch >= L'(' && ch <= L'[')
            return 44;
        else if (ch == L'\\')
            return 46;
        else if (ch >= L']'/* && ch <= L'\u00ff' */)
            return 44;
        /* end state for TKAPOSTROPHE*/
        break;
        case 12:
        /* end state for TKLEFT_PARENTHESIS*/
        break;
        case 13:
        /* end state for TKRIGHT_PARENTHESIS*/
        break;
        case 14:
        /* end state for TKASTERISK*/
        break;
        case 15:
        if (ch >= L'0' && ch <= L'9')
            return 20;
        /* end state for TKPLUS_SIGN*/
        break;
        case 16:
        /* end state for TKCOMMA*/
        break;
        case 17:
        if (ch >= L'0' && ch <= L'9')
            return 20;
        /* end state for TKHYPHEN_MINUS*/
        break;
        case 18:
        /* end state for TKFULL_STOP*/
        break;
        case 19:
        if (ch == L'*')
            return 47;
        else if (ch == L'/')
            return 48;
        /* end state for TKSOLIDUS*/
        break;
        case 20:
        if (ch == L'.')
            return 49;
        else if (ch >= L'0' && ch <= L'9')
            return 20;
        else if (ch == L'E')
            return 50;
        else if (ch == L'e')
            return 50;
        /* end state for TKNumber*/
        break;
        case 21:
        /* end state for TKCOLON*/
        break;
        case 22:
        /* end state for TKSEMICOLON*/
        break;
        case 23:
        /* end state for TKLESS_THAN_SIGN*/
        break;
        case 24:
        /* end state for TKEQUALS_SIGN*/
        break;
        case 25:
        /* end state for TKGREATER_THAN_SIGN*/
        break;
        case 26:
        /* end state for TKQUESTION_MARK*/
        break;
        case 27:
        /* end state for TKCOMMERCIAL_AT*/
        break;
        case 28:
        if (ch >= L'#' && ch <= L'$')
            return 28;
        else if (ch >= L'0' && ch <= L'9')
            return 43;
        else if (ch >= L'A' && ch <= L'Z')
            return 28;
        else if (ch == L'_')
            return 28;
        else if (ch >= L'a' && ch <= L'z')
            return 28;
        /* end state for TKIdentifier*/
        break;
        case 29:
        /* end state for TKLEFT_SQUARE_BRACKET*/
        break;
        case 30:
        if (ch == L'\n')
            return 51;
        else if (ch == L'\r')
            return 52;
        /* end state for TKREVERSE_SOLIDUS*/
        break;
        case 31:
        /* end state for TKRIGHT_SQUARE_BRACKET*/
        break;
        case 32:
        /* end state for TKCIRCUMFLEX_ACCENT*/
        break;
        case 33:
        if (ch >= L'#' && ch <= L'$')
            return 28;
        else if (ch >= L'0' && ch <= L'9')
            return 43;
        else if (ch >= L'A' && ch <= L'Z')
            return 28;
        else if (ch == L'_')
            return 28;
        else if (ch >= L'a' && ch <= L'z')
            return 28;
    /*TKLOW_LINE*/
        /* end state for TKLOW_LINE*/
        break;
        case 34:
        if (ch == L'`')
            return 53;
        /* end state for TKGRAVE_ACCENT*/
        break;
        case 35:
        /* end state for TKLEFT_CURLY_BRACKET*/
        break;
        case 36:
        /* end state for TKVERTICAL_LINE*/
        break;
        case 37:
        /* end state for TKRIGHT_CURLY_BRACKET*/
        break;
        case 38:
        /* end state for TKTILL*/
        break;
        case 39:
            return -1; 
        break;
        case 40:
        if (ch >= L' ' && ch <= L'!')
            return 40;
        else if (ch == L'"')
            return 41;
        else if (ch >= L'#' && ch <= L'[')
            return 40;
        else if (ch == L'\\')
            return 42;
        else if (ch >= L']'/* && ch <= L'\u00ff' */)
            return 40;
        break;
        case 41:
        /* end state for TKSTRING*/
        break;
        case 42:
        if (ch == L'"')
            return 40;
        else if (ch == L'/')
            return 40;
        else if (ch == L'\\')
            return 40;
        else if (ch == L'b')
            return 40;
        else if (ch == L'f')
            return 40;
        else if (ch == L'n')
            return 40;
        else if (ch == L'r')
            return 40;
        else if (ch == L't')
            return 40;
        if (ch == L'u')
    return 54;
        break;
        case 43:
        if (ch == L'$')
            return 55;
        else if (ch >= L'0' && ch <= L'9')
            return 43;
        else if (ch >= L'A' && ch <= L'Z')
            return 55;
        else if (ch == L'_')
            return 55;
        else if (ch >= L'a' && ch <= L'z')
            return 55;
        break;
        case 44:
        if (ch >= L' ' && ch <= L'&')
            return 44;
        else if (ch == L'\'')
            return 45;
        else if (ch >= L'(' && ch <= L'[')
            return 44;
        else if (ch == L'\\')
            return 46;
        else if (ch >= L']'/* && ch <= L'\u00ff' */)
            return 44;
        break;
        case 45:
        /* end state for TKCHAR*/
        break;
        case 46:
        if (ch == L'\'')
            return 44;
        else if (ch >= L'/' && ch <= L'0')
            return 44;
        else if (ch == L'\\')
            return 44;
        else if (ch == L'b')
            return 44;
        else if (ch == L'f')
            return 44;
        else if (ch == L'n')
            return 44;
        else if (ch == L'r')
            return 44;
        else if (ch == L't')
            return 44;
        if (ch == L'u')
    return 56;
        break;
        case 47:
        if (ch >= L'\t' && ch <= L'\n')
            return 47;
        else if (ch == L'\r')
            return 47;
        else if (ch >= L' ' && ch <= L')')
            return 47;
        else if (ch == L'*')
            return 57;
        else if (ch >= L'+'/* && ch <= L'\u00ff' */)
            return 47;
        break;
        case 48:
        if (ch == L'\0')
            return 58;
        else if (ch == L'\n')
            return 58;
        else if (ch == L'\r')
            return 59;
        else if (ch >= L' ' && ch <= L'-')
            return 60;
        else if (ch >= L'/'/* && ch <= L'\u00ff' */)
            return 60;
        break;
        case 49:
        if (ch >= L'0' && ch <= L'9')
            return 61;
        break;
        case 50:
        if (ch == L'+')
            return 62;
        else if (ch == L'-')
            return 62;
        else if (ch >= L'0' && ch <= L'9')
            return 63;
        break;
        case 51:
        /* end state for TKNotBreakLine*/
        break;
        case 52:
        if (ch == L'\n')
    return 51;
        break;
        case 53:
        if (ch == L'`')
    return 64;
        break;
        case 54:
        if (ch >= L'0' && ch <= L'9')
            return 65;
        else if (ch >= L'A' && ch <= L'F')
            return 65;
        else if (ch >= L'a' && ch <= L'f')
            return 65;
        break;
        case 55:
        if (ch == L'$')
            return 55;
        else if (ch >= L'A' && ch <= L'Z')
            return 55;
        else if (ch == L'_')
            return 55;
        else if (ch >= L'a' && ch <= L'z')
            return 55;
        /* end state for TKIdentifier*/
        break;
        case 56:
        if (ch >= L'0' && ch <= L'9')
            return 66;
        else if (ch >= L'A' && ch <= L'F')
            return 66;
        else if (ch >= L'a' && ch <= L'f')
            return 66;
        break;
        case 57:
        if (ch >= L'\t' && ch <= L'\n')
            return 47;
        else if (ch == L'\r')
            return 47;
        else if (ch >= L' ' && ch <= L'.')
            return 47;
        else if (ch == L'/')
            return 67;
        else if (ch >= L'0'/* && ch <= L'\u00ff' */)
            return 47;
        break;
        case 58:
        /* end state for TKLINECOMMENT*/
        break;
        case 59:
        if (ch == L'\n')
    return 58;
        break;
        case 60:
        if (ch == L'\0')
            return 58;
        else if (ch == L'\n')
            return 58;
        else if (ch == L'\r')
            return 59;
        else if (ch >= L' '/* && ch <= L'\u00ff' */)
            return 60;
        break;
        case 61:
        if (ch == L'E')
            return 50;
        else if (ch == L'e')
            return 50;
        /* end state for TKNumber*/
        break;
        case 62:
        if (ch >= L'0' && ch <= L'9')
            return 63;
        break;
        case 63:
        /* end state for TKNumber*/
        break;
        case 64:
        /* end state for TKTKNOWIKI_BLOCK_CLOSE*/
        break;
        case 65:
        if (ch >= L'0' && ch <= L'9')
            return 68;
        else if (ch >= L'A' && ch <= L'F')
            return 68;
        else if (ch >= L'a' && ch <= L'f')
            return 68;
        break;
        case 66:
        if (ch >= L'0' && ch <= L'9')
            return 69;
        else if (ch >= L'A' && ch <= L'F')
            return 69;
        else if (ch >= L'a' && ch <= L'f')
            return 69;
        break;
        case 67:
        /* end state for TKCOMMENT*/
        break;
        case 68:
        if (ch >= L'0' && ch <= L'9')
            return 70;
        else if (ch >= L'A' && ch <= L'F')
            return 70;
        else if (ch >= L'a' && ch <= L'f')
            return 70;
        break;
        case 69:
        if (ch >= L'0' && ch <= L'9')
            return 71;
        else if (ch >= L'A' && ch <= L'F')
            return 71;
        else if (ch >= L'a' && ch <= L'f')
            return 71;
        break;
        case 70:
        if (ch >= L'0' && ch <= L'9')
            return 40;
        else if (ch >= L'A' && ch <= L'F')
            return 40;
        else if (ch >= L'a' && ch <= L'f')
            return 40;
        break;
        case 71:
        if (ch >= L'0' && ch <= L'9')
            return 44;
        else if (ch >= L'A' && ch <= L'F')
            return 44;
        else if (ch >= L'a' && ch <= L'f')
            return 44;
        break;
    } /*switch*/
    return -1;
}

int Cpp_IsInterleave(Cpp_Tokens tk)
{
    return false; /*todo add you blanks token here*/
}

int Cpp_GetTokenFromState(int state, Cpp_Tokens* tk)
{
    switch (state)
    {
        case 1: *tk = TKEndMark; break;
        case 2: *tk = TKBlanks; break;
        case 3: *tk = TKBreakLine; break;
        case 5: *tk = TKEXCLAMATION_MARK; break;
        case 6: *tk = TKQUOTATION_MARK; break;
        case 7: *tk = TKNUMBER_SIGN; break;
        case 8: *tk = TKDOLLAR_SIGN; break;
        case 9: *tk = TKPERCENT_SIGN; break;
        case 10: *tk = TKAMPERSAND; break;
        case 11: *tk = TKAPOSTROPHE; break;
        case 12: *tk = TKLEFT_PARENTHESIS; break;
        case 13: *tk = TKRIGHT_PARENTHESIS; break;
        case 14: *tk = TKASTERISK; break;
        case 15: *tk = TKPLUS_SIGN; break;
        case 16: *tk = TKCOMMA; break;
        case 17: *tk = TKHYPHEN_MINUS; break;
        case 18: *tk = TKFULL_STOP; break;
        case 19: *tk = TKSOLIDUS; break;
        case 20: *tk = TKNumber; break;
        case 21: *tk = TKCOLON; break;
        case 22: *tk = TKSEMICOLON; break;
        case 23: *tk = TKLESS_THAN_SIGN; break;
        case 24: *tk = TKEQUALS_SIGN; break;
        case 25: *tk = TKGREATER_THAN_SIGN; break;
        case 26: *tk = TKQUESTION_MARK; break;
        case 27: *tk = TKCOMMERCIAL_AT; break;
        case 28: *tk = TKIdentifier; break;
        case 29: *tk = TKLEFT_SQUARE_BRACKET; break;
        case 30: *tk = TKREVERSE_SOLIDUS; break;
        case 31: *tk = TKRIGHT_SQUARE_BRACKET; break;
        case 32: *tk = TKCIRCUMFLEX_ACCENT; break;
        case 33: *tk = TKLOW_LINE; break;
        case 34: *tk = TKGRAVE_ACCENT; break;
        case 35: *tk = TKLEFT_CURLY_BRACKET; break;
        case 36: *tk = TKVERTICAL_LINE; break;
        case 37: *tk = TKRIGHT_CURLY_BRACKET; break;
        case 38: *tk = TKTILL; break;
        case 41: *tk = TKSTRING; break;
        case 45: *tk = TKCHAR; break;
        case 51: *tk = TKNotBreakLine; break;
        case 55: *tk = TKIdentifier; break;
        case 58: *tk = TKLINECOMMENT; break;
        case 61: *tk = TKNumber; break;
        case 63: *tk = TKNumber; break;
        case 64: *tk = TKTKNOWIKI_BLOCK_CLOSE; break;
        case 67: *tk = TKCOMMENT; break;
        default:
            return 0;
    }
    return 1;
}
