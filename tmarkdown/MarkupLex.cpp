/*
 * Generated by TKLGEN - VersionNov 27 2015
 * Copyright (C) 2013, Thiago Adams (thiago.adams@gmail.com)
 * www.thradams.com
 *
 */
#include "stdafx.h"
#include <stdbool.h>
#include "MarkupLex.h"
const char* Markup_Tokens_ToString(Markup_Tokens e)
{
    switch(e)
    {
    case TKLink: return "Link";
    case TKLink2: return "Link2";
    case TKImage: return "Image";
    case TKEscape: return "Escape";
    case TKBold: return "Bold";
    case TKItalic: return "Italic";
    case TKOther: return "Other";
    default:break;
    }
    return "";
}

int Markup_GetNext(int state, wchar_t ch)
{
    switch (state)
    {
        case 0:
        if (ch == L' ')
            return 1;
        else if (ch == L'!')
            return 2;
        else if (ch == L'"')
            return 1;
        else if (ch >= L'$' && ch <= L')')
            return 1;
        else if (ch == L'*')
            return 3;
        else if (ch >= L'+' && ch <= L'Z')
            return 1;
        else if (ch == L'[')
            return 4;
        else if (ch == L'\\')
            return 5;
        else if (ch >= L']' && ch <= L'^')
            return 1;
        else if (ch == L'_')
            return 6;
        else if (ch >= L'`' && ch <= L'g')
            return 1;
        else if (ch == L'h')
            return 7;
        else if (ch >= L'i' && ch <= L'}')
            return 1;
        break;
        case 1:
        /* end state for TKOther*/
        break;
        case 2:
        if (ch == L'[')
    return 9;
        break;
        case 3:
        if (ch == L'*')
    return 10;
        break;
        case 4:
        if (ch == L' ')
            return 4;
        else if (ch >= L'-' && ch <= L':')
            return 4;
        else if (ch >= L'A' && ch <= L'Z')
            return 4;
        else if (ch == L']')
            return 11;
        else if (ch == L'_')
            return 4;
        else if (ch >= L'a' && ch <= L'z')
            return 4;
        break;
        case 5:
        if (ch == L'*')
            return 12;
        /* end state for TKOther*/
        break;
        case 6:
        if (ch == L'_')
    return 13;
        break;
        case 7:
        if (ch == L't')
            return 14;
        /* end state for TKOther*/
        break;
        case 8:
            return -1; 
        break;
        case 9:
        if (ch == L' ')
            return 9;
        else if (ch >= L'-' && ch <= L':')
            return 9;
        else if (ch >= L'A' && ch <= L'Z')
            return 9;
        else if (ch == L']')
            return 15;
        else if (ch == L'_')
            return 9;
        else if (ch >= L'a' && ch <= L'z')
            return 9;
        break;
        case 10:
        /* end state for TKBold*/
        break;
        case 11:
        if (ch == L'(')
    return 16;
        break;
        case 12:
        /* end state for TKEscape*/
        break;
        case 13:
        /* end state for TKItalic*/
        break;
        case 14:
        if (ch == L't')
    return 17;
        break;
        case 15:
        if (ch == L'(')
    return 18;
        break;
        case 16:
        if (ch == L' ')
            return 19;
        else if (ch >= L'-' && ch <= L':')
            return 19;
        else if (ch >= L'A' && ch <= L'Z')
            return 19;
        else if (ch == L'_')
            return 19;
        else if (ch >= L'a' && ch <= L'z')
            return 19;
        break;
        case 17:
        if (ch == L'p')
    return 20;
        break;
        case 18:
        if (ch == L' ')
            return 21;
        else if (ch >= L'-' && ch <= L':')
            return 21;
        else if (ch >= L'A' && ch <= L'Z')
            return 21;
        else if (ch == L'_')
            return 21;
        else if (ch >= L'a' && ch <= L'z')
            return 21;
        break;
        case 19:
        if (ch == L' ')
            return 19;
        else if (ch == L')')
            return 22;
        else if (ch >= L'-' && ch <= L':')
            return 19;
        else if (ch >= L'A' && ch <= L'Z')
            return 19;
        else if (ch == L'_')
            return 19;
        else if (ch >= L'a' && ch <= L'z')
            return 19;
        break;
        case 20:
        if (ch == L':')
            return 23;
        if (ch == L's')
    return 24;
        break;
        case 21:
        if (ch == L' ')
            return 21;
        else if (ch == L')')
            return 25;
        else if (ch >= L'-' && ch <= L':')
            return 21;
        else if (ch >= L'A' && ch <= L'Z')
            return 21;
        else if (ch == L'_')
            return 21;
        else if (ch >= L'a' && ch <= L'z')
            return 21;
        break;
        case 22:
        /* end state for TKLink2*/
        break;
        case 23:
        if (ch == L'/')
    return 26;
        break;
        case 24:
        if (ch == L':')
    return 23;
        break;
        case 25:
        /* end state for TKImage*/
        break;
        case 26:
        if (ch == L'/')
    return 27;
        break;
        case 27:
        if (ch >= L'!' && ch <= L'~')
            return 28;
        break;
        case 28:
        if (ch >= L'!' && ch <= L'~')
            return 28;
        /* end state for TKLink*/
        break;
    } /*switch*/
    return -1;
}

int Markup_IsInterleave(Markup_Tokens tk)
{
    return false; /*todo add you blanks token here*/
}

int Markup_GetTokenFromState(int state, Markup_Tokens* tk)
{
    switch (state)
    {
        case 1: *tk = TKOther; break;
        case 5: *tk = TKOther; break;
        case 7: *tk = TKOther; break;
        case 10: *tk = TKBold; break;
        case 12: *tk = TKEscape; break;
        case 13: *tk = TKItalic; break;
        case 22: *tk = TKLink2; break;
        case 25: *tk = TKImage; break;
        case 28: *tk = TKLink; break;
        default:
            return 0;
    }
    return 1;
}
